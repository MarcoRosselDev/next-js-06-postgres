//ALTER TABLE bikes ADD PRIMARY KEY(columna1, columna2);
alter table bikes add column bike_id SERIAL PRIMARY KEY;
ALTER TABLE bikes ADD COLUMN type VARCHAR(50) NOT NULL;
ALTER TABLE bikes ADD COLUMN size INT NOT NULL;
ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL;

//como agrego una columna booleana con un valor por defecto en posgresql?
ALTER TABLE nombre_tabla ADD COLUMN nueva_columna BOOLEAN DEFAULT valor_predeterminado;
ALTER TABLE bikes ADD COLUMN available BOOLEAN NOT NULL DEFAULT TRUE;

// TABLA 2 customers
CREATE TABLE customers();
ALTER TABLE customers ADD COLUMN customer_id SERIAL PRIMARY KEY;
ALTER TABLE customers ADD COLUMN phone VARCHAR(15) NOT NULL UNIQUE;
ALTER TABLE customers ADD COLUMN name VARCHAR(40) NOT NULL;

// TABLE 3 rentals
CREATE TABLE rentals();
ALTER TABLE rentals ADD COLUMN rental_id SERIAL PRIMARY KEY;
ALTER TABLE rentals ADD COLUMN customer_id INT NOT NULL;
ALTER TABLE rentals ADD COLUMN bike_id INT NOT NULL;
ALTER TABLE rentals ADD COLUMN date_rented DATE NOT NULL DEFAULT NOW();
ALTER TABLE rentals ADD COLUMN date_returned DATE;

// establecer llave foranea de rentals con customers en la columna customer_id> ejemplo comando>
ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column);
ALTER TABLE rentals ADD FOREIGN KEY(customer_id) REFERENCES customers(customer_id);
ALTER TABLE rentals ADD FOREIGN KEY(bike_id) REFERENCES bikes(bike_id);

// agregar registros a bikes
INSERT INTO bikes(type, size) VALUES('Mountain', 27);
INSERT INTO bikes(type, size) VALUES('Mountain', 28);
INSERT INTO bikes(type, size) VALUES('Mountain', 29);
INSERT INTO bikes(type, size) VALUES('Road', 27);
INSERT INTO bikes(type, size) VALUES('Road', 28), ('Road', 29);
INSERT INTO bikes(type, size) VALUES('BMX', 19), ('BMX', 20), ('BMX', 21);


// dump db
pg_dump -cC --inserts -U freecodecamp bikes > bikes.sql
// rebuild db
psql -U postgres < bikes.sql

querys:

SELECT bike_id, type, size FROM bikes WHERE available=TRUE ORDER BY bike_id;
-- actualiza todas los registros de bikes en la columna available a FALSE
UPDATE bikes SET available=FALSE WHERE available=TRUE;
-- actualiza todo a TRUE menos los de marca BMX  ----> se puede mejorar este resultado ojete!
UPDATE bikes SET available=TRUE WHERE type='Road' OR type='Mountain';

SELECT available FROM bikes WHERE available=TRUE;





echo "$AVAILABLE_BIKES" | while read BIKE_ID BAR TYPE BAR SIZE
do
  echo "$BIKE_ID, $TYPE, $SIZE"
done

insertar un nuevo usuario a la tabla usuarios
INSERT INTO customers(phone, name) VALUES($var, $var);
get el id del usuario utilizando el phone
SELECT customer_id FROM customers WHERE phone='$';
ingresar la renta a la db
INSERT INTO rentals(customer_id, bike_id) VALUES($CUSTOMER_ID , $BIKE_ID_TO_RENT);
actualizar available a false en la tabla bikes
UPDATE bikes SET available=FALSE WHERE bike_id=$bike_id;
get size y type  de la bike rentada
SELECT size, type FROM bikes WHERE bike_id=$BIKE_ID_TO_RENT


sed sintax para reemplasar caracteres
sed s/<regex_pattern_to_replace>/<characters_to_replace_with>/<regex_flags>
echo '28 | Mountain' | sed 's/ /=/g'
28=|=Mountain
echo '28 | Mountain' | sed 's/ |/"/'
28" Mountain
echo "$(echo ' M e ' | sed 's/ //g')."
Me.
echo "$(echo ' M e ' | sed 's/^ //g')."   -----> ^ solo el espacio en el principio
M e .
echo "$(echo '   M e ' | sed 's/^ *//g')." -----> * todos los de el principio "no solo 1 caracter"
M e .
echo "$(echo '   M e ' | sed 's/ $//g')." ---> $ es el contrario de ^, significa al final del texto
echo "$(echo '   M e   ' | sed 's/ *$//g')."
echo "$(echo '   M e   ' | sed -E 's/^ *| *$//g')." ---> | mas de un match de patron y -E
// comando para logearme
psql --username=freecodecamp --dbname=bikes